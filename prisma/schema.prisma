generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              Int       @id @default(autoincrement())
  first_name      String    @db.VarChar(100)
  last_name       String    @db.VarChar(100)
  document_type   String    @db.VarChar(50)
  document_number String    @unique @db.VarChar(50)
  email           String    @db.VarChar(150)
  phone_number    String    @db.VarChar(20)
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  vehicles        Vehicle[]

  @@map("customers")
}

model Vehicle {
  id            Int           @id @default(autoincrement())
  customer_id   Int
  make          String        @db.VarChar(100)
  model         String        @db.VarChar(100)
  license_plate String        @db.VarChar(20)
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  appointments  Appointment[]
  customer      Customer      @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_customer")

  @@map("vehicles")
}

model FaultType {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  description  String?
  appointments Appointment[]

  @@map("fault_types")
}

model Appointment {
  id             Int       @id @default(autoincrement())
  vehicle_id     Int
  diagnosis_date DateTime  @db.Date
  diagnosis_time DateTime  @db.Time(6)
  fault_type_id  Int
  request_scan   Boolean   @default(false)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  fault_type     FaultType @relation(fields: [fault_type_id], references: [id], onUpdate: NoAction, map: "fk_fault_type")
  vehicle        Vehicle   @relation(fields: [vehicle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_vehicle")

  @@map("appointments")
}
